server.port=9988

some.config.name=World


######################    CASSANDRA ###########################
spring.data.cassandra.keyspace-name=mykeyspace
spring.data.cassandra.contact-points=${cassandra.address:192.168.99.100}
spring.data.cassandra.port=9042
#spring.data.cassandra.username= # Login user of the server.
#spring.data.cassandra.password= # Login password of the server.
#spring.data.cassandra.cluster-name= # Name of the Cassandra cluster.
#spring.data.cassandra.compression=none # Compression supported by the Cassandra binary protocol.
#spring.data.cassandra.connect-timeout-millis= # Socket option: connection time out.
#spring.data.cassandra.consistency-level= # Queries consistency level.
#spring.data.cassandra.fetch-size= # Queries default fetch size.
#spring.data.cassandra.load-balancing-policy= # Class name of the load balancing policy.
#spring.data.cassandra.read-timeout-millis= # Socket option: read time out.
#spring.data.cassandra.reconnection-policy= # Reconnection policy class.
#spring.data.cassandra.retry-policy= # Class name of the retry policy.
#spring.data.cassandra.serial-consistency-level= # Queries serial consistency level.
#spring.data.cassandra.schema-action=none # Schema action to take at startup.
#spring.data.cassandra.ssl=false # Enable SSL support.



######################    Redis ###########################
spring.redis.host=${redis.address:192.168.99.100}
spring.redis.port=6379
spring.redis.password=
#spring.redis.url= # Connection URL, will override host, port and password (user will be ignored), e.g. redis://user:password@example.com:6379
#spring.redis.cluster.max-redirects= # Maximum number of redirects to follow when executing commands across the cluster.
#spring.redis.cluster.nodes= # Comma-separated list of "host:port" pairs to bootstrap from.
#spring.redis.database=0 # Database index used by the connection factory.
#spring.redis.ssl=false # Enable SSL support.
#spring.redis.pool.max-active=8 # Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
#spring.redis.pool.max-idle=8 # Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
#spring.redis.pool.max-wait=-1 # Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
#spring.redis.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
#spring.redis.sentinel.master= # Name of Redis server.
#spring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.
#spring.redis.timeout=0 # Connection timeout in milliseconds.



######################    RABBIT (RabbitProperties) ###########################
spring.rabbitmq.host=${rabbitmq.address:192.168.99.100}
spring.rabbitmq.username=orasio
spring.rabbitmq.password=password
spring.rabbitmq.port=5672
#spring.rabbitmq.virtual-host=/ # Virtual host to use when connecting to the broker.
#spring.rabbitmq.addresses= # Comma-separated list of addresses to which the client should connect.
#spring.rabbitmq.cache.channel.checkout-timeout= # Number of milliseconds to wait to obtain a channel if the cache size has been reached.
#spring.rabbitmq.cache.channel.size= # Number of channels to retain in the cache.
#spring.rabbitmq.cache.connection.mode=channel # Connection factory cache mode.
#spring.rabbitmq.cache.connection.size= # Number of connections to cache.
#spring.rabbitmq.connection-timeout= # Connection timeout, in milliseconds; zero for infinite.
#spring.rabbitmq.dynamic=true # Create an AmqpAdmin bean.
#spring.rabbitmq.listener.acknowledge-mode= # Acknowledge mode of container.
#spring.rabbitmq.listener.auto-startup=true # Start the container automatically on startup.
#spring.rabbitmq.listener.concurrency= # Minimum number of consumers.
#spring.rabbitmq.listener.default-requeue-rejected= # Whether or not to requeue delivery failures; default `true`.
#spring.rabbitmq.listener.idle-event-interval= # How often idle container events should be published in milliseconds.
#spring.rabbitmq.listener.max-concurrency= # Maximum number of consumers.
#spring.rabbitmq.listener.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).
#spring.rabbitmq.listener.retry.enabled=false # Whether or not publishing retries are enabled.
#spring.rabbitmq.listener.retry.initial-interval=1000 # Interval between the first and second attempt to deliver a message.
#spring.rabbitmq.listener.retry.max-attempts=3 # Maximum number of attempts to deliver a message.
#spring.rabbitmq.listener.retry.max-interval=10000 # Maximum interval between attempts.
#spring.rabbitmq.listener.retry.multiplier=1.0 # A multiplier to apply to the previous delivery retry interval.
#spring.rabbitmq.listener.retry.stateless=true # Whether or not retry is stateless or stateful.
#spring.rabbitmq.listener.transaction-size= # Number of messages to be processed in a transaction. For best results it should be less than or equal to the prefetch count.
#spring.rabbitmq.publisher-confirms=false # Enable publisher confirms.
#spring.rabbitmq.publisher-returns=false # Enable publisher returns.
#spring.rabbitmq.requested-heartbeat= # Requested heartbeat timeout, in seconds; zero for none.
#spring.rabbitmq.ssl.enabled=false # Enable SSL support.
#spring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSL certificate.
#spring.rabbitmq.ssl.key-store-password= # Password used to access the key store.
#spring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates.
#spring.rabbitmq.ssl.trust-store-password= # Password used to access the trust store.
#spring.rabbitmq.ssl.algorithm= # SSL algorithm to use. By default configure by the rabbit client library.
#spring.rabbitmq.template.mandatory=false # Enable mandatory messages.
#spring.rabbitmq.template.receive-timeout=0 # Timeout for `receive()` methods.
#spring.rabbitmq.template.reply-timeout=5000 # Timeout for `sendAndReceive()` methods.
#spring.rabbitmq.template.retry.enabled=false # Set to true to enable retries in the `RabbitTemplate`.
#spring.rabbitmq.template.retry.initial-interval=1000 # Interval between the first and second attempt to publish a message.
#spring.rabbitmq.template.retry.max-attempts=3 # Maximum number of attempts to publish a message.
#spring.rabbitmq.template.retry.max-interval=10000 # Maximum number of attempts to publish a message.
#spring.rabbitmq.template.retry.multiplier=1.0 # A multiplier to apply to the previous publishing retry interval.
